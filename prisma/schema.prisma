generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "sqlite"
  url       = env("DATABASE_URL")
}

model Role {
  id        String     @id @default(cuid())
  name      String     @unique
  users     UserRole[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model UserRole {
  id        String   @id @default(cuid())
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId    String   @map("role")
  userId    String   @map("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                             String         @id @default(cuid())
  name                           String?
  firstName                      String?
  lastName                       String?
  email                          String?        @unique
  emailVerified                  DateTime?
  image                          String?
  accounts                       Account[]
  sessions                       Session[]
  roles                          UserRole[]
  createdAt                      DateTime       @default(now())
  updatedAt                      DateTime       @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Banner {
  id            String   @id @default(cuid())
  title         String
  description   String
  isActive      Boolean  @default(false)
  link          String?
  linkText      String?
  updatedBy     String
  createdBy     String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


model Post {
  id            String   @id @default(cuid())
  title         String
  content       String
  isPublished   Boolean  @default(false)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}